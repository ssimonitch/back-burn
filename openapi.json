{
  "components": {
    "schemas": {
      "DifficultyLevel": {
        "description": "Workout plan difficulty levels.\n\nUsed to categorize plans by required experience and fitness level.",
        "enum": [
          "beginner",
          "intermediate",
          "advanced"
        ],
        "title": "DifficultyLevel",
        "type": "string"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "title": "Detail",
            "type": "array"
          }
        },
        "title": "HTTPValidationError",
        "type": "object"
      },
      "PaginatedResponse_PlanResponseModel_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/PlanResponseModel"
            },
            "title": "Items",
            "type": "array"
          },
          "page": {
            "title": "Page",
            "type": "integer"
          },
          "per_page": {
            "title": "Per Page",
            "type": "integer"
          },
          "total": {
            "title": "Total",
            "type": "integer"
          }
        },
        "required": [
          "items",
          "total",
          "page",
          "per_page"
        ],
        "title": "PaginatedResponse[PlanResponseModel]",
        "type": "object"
      },
      "PlanCreateModel": {
        "additionalProperties": false,
        "description": "Model for creating a new workout plan.",
        "properties": {
          "days_per_week": {
            "anyOf": [
              {
                "maximum": 7.0,
                "minimum": 1.0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Days Per Week"
          },
          "description": {
            "anyOf": [
              {
                "maxLength": 2000,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "difficulty_level": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DifficultyLevel"
              },
              {
                "type": "null"
              }
            ]
          },
          "duration_weeks": {
            "anyOf": [
              {
                "exclusiveMinimum": 0.0,
                "maximum": 52.0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Weeks"
          },
          "goal": {
            "anyOf": [
              {
                "maxLength": 200,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Goal"
          },
          "is_public": {
            "default": false,
            "title": "Is Public",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": true,
            "title": "Metadata",
            "type": "object"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "title": "Name",
            "type": "string"
          },
          "training_style": {
            "$ref": "#/components/schemas/TrainingStyle"
          }
        },
        "required": [
          "name",
          "training_style"
        ],
        "title": "PlanCreateModel",
        "type": "object"
      },
      "PlanResponseModel": {
        "description": "Model for workout plan API responses.",
        "properties": {
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "days_per_week": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Days Per Week"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "difficulty_level": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Difficulty Level"
          },
          "duration_weeks": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Weeks"
          },
          "goal": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Goal"
          },
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "is_public": {
            "title": "Is Public",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": true,
            "title": "Metadata",
            "type": "object"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "training_style": {
            "title": "Training Style",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "training_style",
          "goal",
          "difficulty_level",
          "duration_weeks",
          "days_per_week",
          "is_public",
          "metadata",
          "created_at"
        ],
        "title": "PlanResponseModel",
        "type": "object"
      },
      "PlanUpdateModel": {
        "additionalProperties": false,
        "description": "Model for updating an existing workout plan.",
        "properties": {
          "days_per_week": {
            "anyOf": [
              {
                "maximum": 7.0,
                "minimum": 1.0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Days Per Week"
          },
          "description": {
            "anyOf": [
              {
                "maxLength": 2000,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "difficulty_level": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DifficultyLevel"
              },
              {
                "type": "null"
              }
            ]
          },
          "duration_weeks": {
            "anyOf": [
              {
                "exclusiveMinimum": 0.0,
                "maximum": 52.0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Weeks"
          },
          "goal": {
            "anyOf": [
              {
                "maxLength": 200,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Goal"
          },
          "is_public": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Public"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "name": {
            "anyOf": [
              {
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "training_style": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TrainingStyle"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "title": "PlanUpdateModel",
        "type": "object"
      },
      "TrainingStyle": {
        "description": "Training styles matching the database training_styles reference table.\n\nThese values are seeded in the database and should remain synchronized\nwith supabase/seeds/01_reference_seed.sql.",
        "enum": [
          "powerlifting",
          "bodybuilding",
          "powerbuilding",
          "general_fitness",
          "athletic_performance"
        ],
        "title": "TrainingStyle",
        "type": "string"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "title": "Location",
            "type": "array"
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        },
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError",
        "type": "object"
      }
    },
    "securitySchemes": {
      "SupabaseJWTBearer": {
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "description": "\n## AI Fitness Companion Backend API\n\nThe Slow Burn API provides a comprehensive backend for an AI-powered fitness companion application.\nUsers develop a deepening relationship with an AI companion as they log workouts and achieve their fitness goals.\n\n### Key Features:\n- 🔐 **JWT Authentication** via Supabase\n- 💪 **Workout Plan Management** with versioning support\n- 🏋️ **Exercise Library** (coming in Sprint 5)\n- 🤖 **AI Chat Integration** with Google Gemini (coming in Sprint 6)\n- 📈 **Progress Tracking** and affinity scoring\n\n### Current Sprint: 3 (Plan Creation)\nFor more details, see the [project documentation](https://github.com/yourusername/slow-burn).\n    ",
    "title": "Slow Burn API",
    "version": "0.1.0"
  },
  "openapi": "3.1.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "root__get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Root  Get",
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [],
        "summary": "Root"
      }
    },
    "/api/v1/auth/me": {
      "get": {
        "description": "Get current authenticated user information.\n\nRequires a valid JWT token in the Authorization header.",
        "operationId": "get_current_user_info_api_v1_auth_me_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Get Current User Info Api V1 Auth Me Get",
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "SupabaseJWTBearer": []
          }
        ],
        "summary": "Get Current User Info",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/v1/auth/public": {
      "get": {
        "description": "Public endpoint with optional authentication.\n\nReturns different messages based on authentication status.",
        "operationId": "public_endpoint_api_v1_auth_public_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "Response Public Endpoint Api V1 Auth Public Get",
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [],
        "summary": "Public Endpoint",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/v1/plans/": {
      "get": {
        "description": "Retrieve a paginated list of the authenticated user's workout plans.\n\nReturns a paginated list of plans filtered by the authenticated user's ID (via RLS).\nPlans are sorted by updated_at DESC to show most recently modified plans first.\nIf no plans exist for the user, returns an empty array.\n\nArgs:\n    limit: Maximum number of plans to return (1-100, default: 20)\n    offset: Number of plans to skip for pagination (default: 0)\n    jwt_payload: The authenticated user's JWT payload\n    supabase: The Supabase client instance\n\nReturns:\n    PlanListResponseModel containing the plans array and pagination metadata\n\nRaises:\n    HTTPException: If plan retrieval fails due to database errors",
        "operationId": "get_plans_api_v1_plans__get",
        "parameters": [
          {
            "description": "Maximum number of plans to return (1-100)",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 20,
              "description": "Maximum number of plans to return (1-100)",
              "exclusiveMinimum": 0,
              "maximum": 100,
              "title": "Limit",
              "type": "integer"
            }
          },
          {
            "description": "Number of plans to skip for pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "description": "Number of plans to skip for pagination",
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse_PlanResponseModel_"
                }
              }
            },
            "description": "List of plans retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Not authenticated"
                }
              }
            },
            "description": "Authentication required"
          },
          "422": {
            "content": {
              "application/json": {
                "example": {
                  "detail": [
                    {
                      "loc": [
                        "query",
                        "limit"
                      ],
                      "msg": "ensure this value is greater than 0",
                      "type": "value_error.number.not_gt"
                    }
                  ]
                }
              }
            },
            "description": "Validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Failed to retrieve plans"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "SupabaseJWTBearer": []
          }
        ],
        "summary": "Get user's workout plans",
        "tags": [
          "plans"
        ]
      },
      "post": {
        "description": "Create a new workout plan.\n\nCreates a new workout plan for the authenticated user with the provided details.\nThe plan will be assigned a unique ID and version number 1.\n\nArgs:\n    plan_data: The plan creation data\n    jwt_payload: The authenticated user's JWT payload\n    supabase: The Supabase client instance\n\nReturns:\n    The created plan with all database-generated fields\n\nRaises:\n    HTTPException: If plan creation fails due to validation or database errors",
        "operationId": "create_plan_api_v1_plans__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanCreateModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanResponseModel"
                }
              }
            },
            "description": "Plan created successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Plan name cannot be empty or only whitespace"
                }
              }
            },
            "description": "Invalid input data"
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Not authenticated"
                }
              }
            },
            "description": "Authentication required"
          },
          "422": {
            "content": {
              "application/json": {
                "example": {
                  "detail": [
                    {
                      "loc": [
                        "body",
                        "training_style"
                      ],
                      "msg": "Invalid training style",
                      "type": "value_error"
                    }
                  ]
                }
              }
            },
            "description": "Validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Failed to create plan"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "SupabaseJWTBearer": []
          }
        ],
        "summary": "Create a new workout plan",
        "tags": [
          "plans"
        ]
      }
    },
    "/api/v1/plans/{plan_id}": {
      "delete": {
        "description": "Soft delete a workout plan.\n\nPerforms a soft delete by setting the deleted_at timestamp. Only the plan owner\ncan delete their plans. Plans with active workout sessions cannot be deleted.\nThe plan and all its versions will be marked as deleted.\n\nArgs:\n    plan_id: The UUID of the plan to delete\n    jwt_payload: The authenticated user's JWT payload\n    supabase: The Supabase client instance\n\nReturns:\n    None (204 No Content on success)\n\nRaises:\n    HTTPException:\n        - 400 if plan has active workout sessions\n        - 403 if user doesn't own the plan\n        - 404 if plan doesn't exist or is already deleted\n        - 500 if deletion fails due to database errors",
        "operationId": "delete_plan_api_v1_plans__plan_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "plan_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "title": "Plan Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Plan deleted successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Cannot delete plan - it has active workout sessions"
                }
              }
            },
            "description": "Cannot delete plan with active workout sessions"
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Not authenticated"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to delete this plan"
                }
              }
            },
            "description": "User does not own this plan"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Plan not found"
                }
              }
            },
            "description": "Plan not found or already deleted"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          },
          "500": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Failed to delete plan"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "SupabaseJWTBearer": []
          }
        ],
        "summary": "Soft delete a workout plan",
        "tags": [
          "plans"
        ]
      },
      "get": {
        "description": "Retrieve a specific workout plan by its ID.\n\nReturns the detailed plan data for the specified plan_id. Access is controlled\nby RLS policies - users can only access their own plans unless the plan is public.\nPublic plans (is_public=true) can be viewed by anyone, including unauthenticated users.\n\nArgs:\n    plan_id: The UUID of the plan to retrieve\n    jwt_payload: Optional JWT payload - required for private plans, optional for public\n    supabase: The Supabase client instance\n\nReturns:\n    PlanResponseModel containing the plan details\n\nRaises:\n    HTTPException:\n        - 404 if plan doesn't exist or user lacks permission\n        - 500 if retrieval fails due to database errors",
        "operationId": "get_plan_by_id_api_v1_plans__plan_id__get",
        "parameters": [
          {
            "in": "path",
            "name": "plan_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "title": "Plan Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanResponseModel"
                }
              }
            },
            "description": "Plan retrieved successfully"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Plan not found"
                }
              }
            },
            "description": "Plan not found or access denied"
          },
          "422": {
            "content": {
              "application/json": {
                "example": {
                  "detail": [
                    {
                      "loc": [
                        "path",
                        "plan_id"
                      ],
                      "msg": "value is not a valid uuid",
                      "type": "type_error.uuid"
                    }
                  ]
                }
              }
            },
            "description": "Invalid plan ID format"
          },
          "500": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Failed to retrieve plan"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "SupabaseJWTBearer": []
          }
        ],
        "summary": "Get a specific workout plan by ID",
        "tags": [
          "plans"
        ]
      },
      "put": {
        "description": "Update a workout plan by creating a new version.\n\nCreates a new version of the specified plan with the provided updates.\nThe original plan remains unchanged (immutable versioning). Only the plan owner\ncan update their plans, and only active versions can be updated.\n\nVersion Management:\n- Increments version_number from the current version\n- Sets parent_plan_id to maintain version history\n- Marks the current version as inactive (is_active=false)\n- Marks the new version as active (is_active=true)\n\nArgs:\n    plan_id: The UUID of the plan to update\n    plan_update: The partial update data\n    jwt_payload: The authenticated user's JWT payload\n    supabase: The Supabase client instance\n\nReturns:\n    The newly created plan version with updated fields\n\nRaises:\n    HTTPException:\n        - 400 if trying to update an inactive version or no changes provided\n        - 403 if user doesn't own the plan\n        - 404 if plan doesn't exist\n        - 409 if version conflict occurs\n        - 500 if update fails due to database errors",
        "operationId": "update_plan_api_v1_plans__plan_id__put",
        "parameters": [
          {
            "in": "path",
            "name": "plan_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "title": "Plan Id",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanUpdateModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanResponseModel"
                }
              }
            },
            "description": "Plan updated successfully (new version created)"
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "inactive_version": {
                    "summary": "Cannot update inactive version",
                    "value": {
                      "detail": "Cannot update an inactive plan version"
                    }
                  },
                  "no_changes": {
                    "summary": "No changes provided",
                    "value": {
                      "detail": "No changes provided in update request"
                    }
                  }
                }
              }
            },
            "description": "Invalid update request"
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Not authenticated"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to update this plan"
                }
              }
            },
            "description": "User does not own this plan"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Plan not found"
                }
              }
            },
            "description": "Plan not found"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "A newer version of this plan already exists"
                }
              }
            },
            "description": "Version conflict"
          },
          "422": {
            "content": {
              "application/json": {
                "example": {
                  "detail": [
                    {
                      "loc": [
                        "body",
                        "duration_weeks"
                      ],
                      "msg": "ensure this value is greater than 0",
                      "type": "value_error.number.not_gt"
                    }
                  ]
                }
              }
            },
            "description": "Validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Failed to update plan"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "SupabaseJWTBearer": []
          }
        ],
        "summary": "Update a workout plan (creates new version)",
        "tags": [
          "plans"
        ]
      }
    },
    "/health": {
      "get": {
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "Response Health Check Health Get",
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [],
        "summary": "Health Check"
      }
    }
  },
  "security": [
    {
      "SupabaseJWTBearer": []
    }
  ],
  "servers": [
    {
      "description": "Default API server",
      "url": "http://localhost:8000"
    }
  ]
}