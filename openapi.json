{
  "components": {
    "schemas": {
      "AssistanceType": {
        "description": "Type of assistance used during set execution.\n\nDocuments when external help or equipment assistance was used.",
        "enum": [
          "none",
          "spotter",
          "machine_assist",
          "band_assist"
        ],
        "title": "AssistanceType",
        "type": "string"
      },
      "DifficultyLevel": {
        "description": "Workout plan difficulty levels.\n\nUsed to categorize plans by required experience and fitness level.",
        "enum": [
          "beginner",
          "intermediate",
          "advanced"
        ],
        "title": "DifficultyLevel",
        "type": "string"
      },
      "EnhancedPaginatedWorkoutResponse": {
        "description": "Paginated workout response with aggregate metrics.",
        "properties": {
          "aggregate_metrics": {
            "additionalProperties": {
              "type": "number"
            },
            "description": "Aggregate metrics for the current page (effective_volume, total_volume, etc.)",
            "title": "Aggregate Metrics",
            "type": "object"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/WorkoutSummaryModel"
            },
            "title": "Items",
            "type": "array"
          },
          "page": {
            "title": "Page",
            "type": "integer"
          },
          "per_page": {
            "title": "Per Page",
            "type": "integer"
          },
          "total": {
            "title": "Total",
            "type": "integer"
          }
        },
        "required": [
          "items",
          "total",
          "page",
          "per_page"
        ],
        "title": "EnhancedPaginatedWorkoutResponse",
        "type": "object"
      },
      "FailureType": {
        "description": "Type of failure reached during set execution.\n\nHelps differentiate between true muscular failure and other limiting factors.",
        "enum": [
          "muscular",
          "form",
          "cardiovascular",
          "motivation"
        ],
        "title": "FailureType",
        "type": "string"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "title": "Detail",
            "type": "array"
          }
        },
        "title": "HTTPValidationError",
        "type": "object"
      },
      "MoodRating": {
        "description": "Mood rating scale for wellness tracking.\n\nUsed before and after workout sessions.",
        "enum": [
          "very_bad",
          "bad",
          "neutral",
          "good",
          "very_good"
        ],
        "title": "MoodRating",
        "type": "string"
      },
      "PaginatedResponse_PlanResponseModel_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/PlanResponseModel"
            },
            "title": "Items",
            "type": "array"
          },
          "page": {
            "title": "Page",
            "type": "integer"
          },
          "per_page": {
            "title": "Per Page",
            "type": "integer"
          },
          "total": {
            "title": "Total",
            "type": "integer"
          }
        },
        "required": [
          "items",
          "total",
          "page",
          "per_page"
        ],
        "title": "PaginatedResponse[PlanResponseModel]",
        "type": "object"
      },
      "PlanCreateModel": {
        "additionalProperties": false,
        "description": "Model for creating a new workout plan.",
        "properties": {
          "days_per_week": {
            "anyOf": [
              {
                "maximum": 7.0,
                "minimum": 1.0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Days Per Week"
          },
          "description": {
            "anyOf": [
              {
                "maxLength": 2000,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "difficulty_level": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DifficultyLevel"
              },
              {
                "type": "null"
              }
            ]
          },
          "duration_weeks": {
            "anyOf": [
              {
                "exclusiveMinimum": 0.0,
                "maximum": 52.0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Weeks"
          },
          "goal": {
            "anyOf": [
              {
                "maxLength": 200,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Goal"
          },
          "is_public": {
            "default": false,
            "title": "Is Public",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": true,
            "title": "Metadata",
            "type": "object"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "title": "Name",
            "type": "string"
          },
          "training_style": {
            "$ref": "#/components/schemas/TrainingStyle"
          }
        },
        "required": [
          "name",
          "training_style"
        ],
        "title": "PlanCreateModel",
        "type": "object"
      },
      "PlanResponseModel": {
        "description": "Model for workout plan API responses.",
        "properties": {
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "days_per_week": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Days Per Week"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "difficulty_level": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Difficulty Level"
          },
          "duration_weeks": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Weeks"
          },
          "goal": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Goal"
          },
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "is_public": {
            "title": "Is Public",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": true,
            "title": "Metadata",
            "type": "object"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "training_style": {
            "title": "Training Style",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "training_style",
          "goal",
          "difficulty_level",
          "duration_weeks",
          "days_per_week",
          "is_public",
          "metadata",
          "created_at"
        ],
        "title": "PlanResponseModel",
        "type": "object"
      },
      "PlanUpdateModel": {
        "additionalProperties": false,
        "description": "Model for updating an existing workout plan.",
        "properties": {
          "days_per_week": {
            "anyOf": [
              {
                "maximum": 7.0,
                "minimum": 1.0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Days Per Week"
          },
          "description": {
            "anyOf": [
              {
                "maxLength": 2000,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "difficulty_level": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DifficultyLevel"
              },
              {
                "type": "null"
              }
            ]
          },
          "duration_weeks": {
            "anyOf": [
              {
                "exclusiveMinimum": 0.0,
                "maximum": 52.0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Weeks"
          },
          "goal": {
            "anyOf": [
              {
                "maxLength": 200,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Goal"
          },
          "is_public": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Public"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "name": {
            "anyOf": [
              {
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "training_style": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TrainingStyle"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "title": "PlanUpdateModel",
        "type": "object"
      },
      "RangeOfMotionQuality": {
        "description": "Range of motion quality assessment.\n\nTracks movement quality and mobility improvements over time.",
        "enum": [
          "full",
          "partial",
          "limited",
          "assisted"
        ],
        "title": "RangeOfMotionQuality",
        "type": "string"
      },
      "SetCreateModel": {
        "additionalProperties": false,
        "description": "Model for creating a new workout set.",
        "properties": {
          "assistance_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AssistanceType"
              },
              {
                "type": "null"
              }
            ],
            "description": "Type of assistance used (none/spotter/machine_assist/band_assist)"
          },
          "equipment_variation": {
            "anyOf": [
              {
                "maxLength": 100,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Specific variation (e.g., 'close_grip', 'deficit', 'paused')",
            "title": "Equipment Variation"
          },
          "estimated_1rm": {
            "anyOf": [
              {
                "maximum": 1000.0,
                "minimum": 0.0,
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "Calculated 1RM based on weight × reps (Epley formula)",
            "title": "Estimated 1Rm"
          },
          "exercise_id": {
            "format": "uuid",
            "title": "Exercise Id",
            "type": "string"
          },
          "failure_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FailureType"
              },
              {
                "type": "null"
              }
            ],
            "description": "Type of failure if reached (muscular/form/cardiovascular/motivation)"
          },
          "form_quality": {
            "anyOf": [
              {
                "maximum": 5.0,
                "minimum": 1.0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Form quality: 1=poor, 2=fair, 3=good, 4=very good, 5=perfect",
            "title": "Form Quality"
          },
          "intensity_percentage": {
            "anyOf": [
              {
                "maximum": 200.0,
                "minimum": 0.0,
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "Percentage of 1RM used (>100% for overload/assisted work)",
            "title": "Intensity Percentage"
          },
          "notes": {
            "anyOf": [
              {
                "maxLength": 500,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "range_of_motion_quality": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RangeOfMotionQuality"
              },
              {
                "type": "null"
              }
            ],
            "description": "Range of motion quality assessment"
          },
          "reached_failure": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Whether set was taken to complete failure",
            "title": "Reached Failure"
          },
          "reps": {
            "maximum": 1000.0,
            "minimum": 0.0,
            "title": "Reps",
            "type": "integer"
          },
          "rest_period": {
            "anyOf": [
              {
                "maximum": 3600.0,
                "minimum": 0.0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Rest period in seconds",
            "title": "Rest Period"
          },
          "rir": {
            "anyOf": [
              {
                "maximum": 10.0,
                "minimum": 0.0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Reps in Reserve (0-10)",
            "title": "Rir"
          },
          "rpe": {
            "anyOf": [
              {
                "maximum": 10.0,
                "minimum": 1.0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Rate of Perceived Exertion (1-10)",
            "title": "Rpe"
          },
          "set_number": {
            "description": "Order of this set within the exercise (1st, 2nd, etc.)",
            "maximum": 50.0,
            "minimum": 1.0,
            "title": "Set Number",
            "type": "integer"
          },
          "set_type": {
            "$ref": "#/components/schemas/SetType",
            "default": "working",
            "description": "Classification of set purpose - critical for volume calculations"
          },
          "tempo": {
            "anyOf": [
              {
                "maxLength": 10,
                "pattern": "^\\d{1,2}-\\d{1,2}-\\d{1,2}-\\d{1,2}$",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Tempo notation (e.g., 2-0-2-0 for eccentric-pause-concentric-pause)",
            "title": "Tempo"
          },
          "weight": {
            "description": "Weight in kg (max 1000kg)",
            "maximum": 1000.0,
            "minimum": 0.0,
            "title": "Weight",
            "type": "number"
          }
        },
        "required": [
          "exercise_id",
          "set_number",
          "weight",
          "reps"
        ],
        "title": "SetCreateModel",
        "type": "object"
      },
      "SetResponseModel": {
        "description": "Model for workout set API responses.",
        "properties": {
          "assistance_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AssistanceType"
              },
              {
                "type": "null"
              }
            ]
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "equipment_variation": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Equipment Variation"
          },
          "estimated_1rm": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Estimated 1Rm"
          },
          "exercise_id": {
            "format": "uuid",
            "title": "Exercise Id",
            "type": "string"
          },
          "exercise_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Exercise name from join",
            "title": "Exercise Name"
          },
          "failure_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FailureType"
              },
              {
                "type": "null"
              }
            ]
          },
          "form_quality": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Form Quality"
          },
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "intensity_percentage": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Intensity Percentage"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "order_in_workout": {
            "title": "Order In Workout",
            "type": "integer"
          },
          "range_of_motion_quality": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RangeOfMotionQuality"
              },
              {
                "type": "null"
              }
            ]
          },
          "reached_failure": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reached Failure"
          },
          "reps": {
            "title": "Reps",
            "type": "integer"
          },
          "rest_period": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rest Period"
          },
          "rir": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rir"
          },
          "rpe": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rpe"
          },
          "set_number": {
            "title": "Set Number",
            "type": "integer"
          },
          "set_type": {
            "$ref": "#/components/schemas/SetType"
          },
          "tempo": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tempo"
          },
          "volume_load": {
            "description": "Calculated as weight * reps",
            "title": "Volume Load",
            "type": "number"
          },
          "weight": {
            "title": "Weight",
            "type": "number"
          },
          "workout_session_id": {
            "format": "uuid",
            "title": "Workout Session Id",
            "type": "string"
          }
        },
        "required": [
          "id",
          "workout_session_id",
          "exercise_id",
          "set_type",
          "set_number",
          "order_in_workout",
          "weight",
          "reps",
          "rest_period",
          "tempo",
          "rir",
          "rpe",
          "form_quality",
          "intensity_percentage",
          "reached_failure",
          "failure_type",
          "estimated_1rm",
          "equipment_variation",
          "assistance_type",
          "range_of_motion_quality",
          "volume_load",
          "notes",
          "created_at"
        ],
        "title": "SetResponseModel",
        "type": "object"
      },
      "SetType": {
        "description": "Set classification for volume calculations.\n\nCritical for accurate volume tracking and progressive overload.\nOnly 'working' sets count toward effective training volume.",
        "enum": [
          "working",
          "warmup",
          "backoff",
          "drop",
          "cluster",
          "rest_pause",
          "amrap"
        ],
        "title": "SetType",
        "type": "string"
      },
      "TrainingPhase": {
        "description": "Training phase within a periodization cycle.\n\nTracks the current phase for proper progression and volume management.",
        "enum": [
          "accumulation",
          "intensification",
          "realization",
          "deload",
          "testing"
        ],
        "title": "TrainingPhase",
        "type": "string"
      },
      "TrainingStyle": {
        "description": "Training styles matching the database training_styles reference table.\n\nThese values are seeded in the database and should remain synchronized\nwith supabase/seeds/01_reference_seed.sql.",
        "enum": [
          "powerlifting",
          "bodybuilding",
          "powerbuilding",
          "general_fitness",
          "athletic_performance"
        ],
        "title": "TrainingStyle",
        "type": "string"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "title": "Location",
            "type": "array"
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        },
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError",
        "type": "object"
      },
      "WellnessRating": {
        "description": "General wellness rating scale.\n\nUsed for energy, stress, and sleep quality tracking.",
        "enum": [
          "very_low",
          "low",
          "moderate",
          "high",
          "very_high"
        ],
        "title": "WellnessRating",
        "type": "string"
      },
      "WorkoutCreateModel": {
        "additionalProperties": false,
        "description": "Model for creating a new workout session.",
        "properties": {
          "mood": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MoodRating"
              },
              {
                "type": "null"
              }
            ],
            "description": "Post-workout mood"
          },
          "notes": {
            "anyOf": [
              {
                "maxLength": 2000,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "overall_rpe": {
            "anyOf": [
              {
                "maximum": 10.0,
                "minimum": 1.0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Overall session RPE (1-10)",
            "title": "Overall Rpe"
          },
          "plan_id": {
            "anyOf": [
              {
                "format": "uuid",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Optional reference to workout plan",
            "title": "Plan Id"
          },
          "post_workout_energy": {
            "anyOf": [
              {
                "maximum": 10.0,
                "minimum": 1.0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Post-workout energy level (1-10)",
            "title": "Post Workout Energy"
          },
          "pre_workout_energy": {
            "anyOf": [
              {
                "maximum": 10.0,
                "minimum": 1.0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Pre-workout energy level (1-10)",
            "title": "Pre Workout Energy"
          },
          "sets": {
            "description": "List of sets performed in this workout",
            "items": {
              "$ref": "#/components/schemas/SetCreateModel"
            },
            "minItems": 1,
            "title": "Sets",
            "type": "array"
          },
          "sleep_quality": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WellnessRating"
              },
              {
                "type": "null"
              }
            ]
          },
          "stress_after": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WellnessRating"
              },
              {
                "type": "null"
              }
            ]
          },
          "stress_before": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WellnessRating"
              },
              {
                "type": "null"
              }
            ]
          },
          "training_phase": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TrainingPhase"
              },
              {
                "type": "null"
              }
            ],
            "description": "Current periodization phase"
          },
          "workout_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WorkoutType"
              },
              {
                "type": "null"
              }
            ],
            "description": "Primary training stimulus of the session"
          }
        },
        "required": [
          "sets"
        ],
        "title": "WorkoutCreateModel",
        "type": "object"
      },
      "WorkoutDetailResponseModel": {
        "description": "Model for detailed workout session with sets and metrics.",
        "properties": {
          "completed_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "duration_minutes": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Calculated duration in minutes",
            "title": "Duration Minutes"
          },
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "metrics": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WorkoutMetricsModel"
              },
              {
                "type": "null"
              }
            ],
            "description": "Comprehensive workout metrics including effective volume and movement patterns"
          },
          "mood": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MoodRating"
              },
              {
                "type": "null"
              }
            ]
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "overall_rpe": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Overall Rpe"
          },
          "plan_id": {
            "anyOf": [
              {
                "format": "uuid",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Plan Id"
          },
          "plan_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Plan name from join",
            "title": "Plan Name"
          },
          "post_workout_energy": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Post Workout Energy"
          },
          "pre_workout_energy": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pre Workout Energy"
          },
          "sets": {
            "description": "All sets performed, properly ordered by exercise and set number",
            "items": {
              "$ref": "#/components/schemas/SetResponseModel"
            },
            "title": "Sets",
            "type": "array"
          },
          "sleep_quality": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WellnessRating"
              },
              {
                "type": "null"
              }
            ]
          },
          "started_at": {
            "format": "date-time",
            "title": "Started At",
            "type": "string"
          },
          "stress_after": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WellnessRating"
              },
              {
                "type": "null"
              }
            ]
          },
          "stress_before": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WellnessRating"
              },
              {
                "type": "null"
              }
            ]
          },
          "total_sets": {
            "title": "Total Sets",
            "type": "integer"
          },
          "total_volume": {
            "title": "Total Volume",
            "type": "number"
          },
          "training_phase": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TrainingPhase"
              },
              {
                "type": "null"
              }
            ]
          },
          "updated_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "user_id": {
            "format": "uuid",
            "title": "User Id",
            "type": "string"
          },
          "workout_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WorkoutType"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "id",
          "user_id",
          "plan_id",
          "started_at",
          "completed_at",
          "notes",
          "mood",
          "pre_workout_energy",
          "post_workout_energy",
          "stress_before",
          "stress_after",
          "sleep_quality",
          "workout_type",
          "training_phase",
          "overall_rpe",
          "total_sets",
          "total_volume",
          "sets",
          "created_at",
          "updated_at"
        ],
        "title": "WorkoutDetailResponseModel",
        "type": "object"
      },
      "WorkoutMetricsModel": {
        "description": "Model for detailed workout performance metrics.",
        "properties": {
          "average_intensity": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "Average percentage of 1RM for working sets",
            "title": "Average Intensity"
          },
          "effective_volume": {
            "description": "Total volume from working sets only (excludes warm-ups)",
            "title": "Effective Volume",
            "type": "number"
          },
          "estimated_1rm_progression": {
            "additionalProperties": {
              "type": "number"
            },
            "description": "Estimated 1RM values by exercise_id",
            "title": "Estimated 1Rm Progression",
            "type": "object"
          },
          "fatigue_index": {
            "anyOf": [
              {
                "maximum": 1.0,
                "minimum": 0.0,
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "Fatigue score based on form quality degradation (0=fresh, 1=exhausted)",
            "title": "Fatigue Index"
          },
          "total_volume": {
            "description": "Total volume including all set types",
            "title": "Total Volume",
            "type": "number"
          },
          "volume_by_movement_pattern": {
            "additionalProperties": {
              "type": "number"
            },
            "description": "Volume distribution by movement pattern (push/pull/legs/core)",
            "title": "Volume By Movement Pattern",
            "type": "object"
          },
          "working_sets_ratio": {
            "description": "Percentage of effective volume vs total volume (quality indicator)",
            "title": "Working Sets Ratio",
            "type": "number"
          }
        },
        "required": [
          "effective_volume",
          "total_volume",
          "working_sets_ratio"
        ],
        "title": "WorkoutMetricsModel",
        "type": "object"
      },
      "WorkoutResponseModel": {
        "description": "Model for workout session API responses.",
        "properties": {
          "completed_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "mood": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MoodRating"
              },
              {
                "type": "null"
              }
            ]
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "overall_rpe": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Overall Rpe"
          },
          "plan_id": {
            "anyOf": [
              {
                "format": "uuid",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Plan Id"
          },
          "post_workout_energy": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Post Workout Energy"
          },
          "pre_workout_energy": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pre Workout Energy"
          },
          "sleep_quality": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WellnessRating"
              },
              {
                "type": "null"
              }
            ]
          },
          "started_at": {
            "format": "date-time",
            "title": "Started At",
            "type": "string"
          },
          "stress_after": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WellnessRating"
              },
              {
                "type": "null"
              }
            ]
          },
          "stress_before": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WellnessRating"
              },
              {
                "type": "null"
              }
            ]
          },
          "total_sets": {
            "default": 0,
            "description": "Total number of sets in this workout",
            "title": "Total Sets",
            "type": "integer"
          },
          "total_volume": {
            "default": 0,
            "description": "Total volume (sum of all volume_load)",
            "title": "Total Volume",
            "type": "number"
          },
          "training_phase": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TrainingPhase"
              },
              {
                "type": "null"
              }
            ]
          },
          "updated_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "user_id": {
            "format": "uuid",
            "title": "User Id",
            "type": "string"
          },
          "workout_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WorkoutType"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "id",
          "user_id",
          "plan_id",
          "started_at",
          "completed_at",
          "notes",
          "mood",
          "pre_workout_energy",
          "post_workout_energy",
          "stress_before",
          "stress_after",
          "sleep_quality",
          "workout_type",
          "training_phase",
          "overall_rpe",
          "created_at",
          "updated_at"
        ],
        "title": "WorkoutResponseModel",
        "type": "object"
      },
      "WorkoutSummaryModel": {
        "description": "Model for workout session summary in list views.",
        "properties": {
          "completed_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At"
          },
          "duration_minutes": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Minutes"
          },
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "overall_rpe": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Overall Rpe"
          },
          "plan_id": {
            "anyOf": [
              {
                "format": "uuid",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Plan Id"
          },
          "plan_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Plan Name"
          },
          "primary_exercises": {
            "description": "Top 3 exercises by volume",
            "items": {
              "type": "string"
            },
            "title": "Primary Exercises",
            "type": "array"
          },
          "started_at": {
            "format": "date-time",
            "title": "Started At",
            "type": "string"
          },
          "total_sets": {
            "title": "Total Sets",
            "type": "integer"
          },
          "total_volume": {
            "title": "Total Volume",
            "type": "number"
          },
          "training_phase": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TrainingPhase"
              },
              {
                "type": "null"
              }
            ]
          },
          "workout_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WorkoutType"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "id",
          "plan_id",
          "plan_name",
          "started_at",
          "completed_at",
          "workout_type",
          "training_phase",
          "overall_rpe",
          "total_sets",
          "total_volume",
          "duration_minutes"
        ],
        "title": "WorkoutSummaryModel",
        "type": "object"
      },
      "WorkoutType": {
        "description": "Workout type categorizing the primary training stimulus.\n\nUsed to track the focus of each workout session for periodization.",
        "enum": [
          "strength",
          "hypertrophy",
          "power",
          "endurance",
          "mixed",
          "technique",
          "deload"
        ],
        "title": "WorkoutType",
        "type": "string"
      }
    },
    "securitySchemes": {
      "SupabaseJWTBearer": {
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "description": "\n## AI Fitness Companion Backend API\n\nThe Slow Burn API provides a comprehensive backend for an AI-powered fitness companion application.\nUsers develop a deepening relationship with an AI companion as they log workouts and achieve their fitness goals.\n\n### Key Features:\n- 🔐 **JWT Authentication** via Supabase\n- 💪 **Workout Plan Management** with versioning support\n- 🏋️ **Exercise Library** (coming in Sprint 5)\n- 🤖 **AI Chat Integration** with Google Gemini (coming in Sprint 6)\n- 📈 **Progress Tracking** and affinity scoring\n\n### Current Sprint: 4 (Workout Logging)\nFor more details, see the [project documentation](https://github.com/yourusername/slow-burn).\n    ",
    "title": "Slow Burn API",
    "version": "0.1.0"
  },
  "openapi": "3.1.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "root__get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Root  Get",
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [],
        "summary": "Root"
      }
    },
    "/api/v1/auth/me": {
      "get": {
        "description": "Get current authenticated user information.\n\nRequires a valid JWT token in the Authorization header.",
        "operationId": "get_current_user_info_api_v1_auth_me_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Get Current User Info Api V1 Auth Me Get",
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "SupabaseJWTBearer": []
          }
        ],
        "summary": "Get Current User Info",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/v1/auth/public": {
      "get": {
        "description": "Public endpoint with optional authentication.\n\nReturns different messages based on authentication status.",
        "operationId": "public_endpoint_api_v1_auth_public_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "Response Public Endpoint Api V1 Auth Public Get",
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [],
        "summary": "Public Endpoint",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/v1/plans/": {
      "get": {
        "description": "Retrieve a paginated list of the authenticated user's workout plans.\n\nReturns a paginated list of plans filtered by the authenticated user's ID (via RLS).\nPlans are sorted by updated_at DESC to show most recently modified plans first.\nIf no plans exist for the user, returns an empty array.\n\nArgs:\n    limit: Maximum number of plans to return (1-100, default: 20)\n    offset: Number of plans to skip for pagination (default: 0)\n    jwt_payload: The authenticated user's JWT payload\n    supabase: The Supabase client instance\n\nReturns:\n    PlanListResponseModel containing the plans array and pagination metadata\n\nRaises:\n    HTTPException: If plan retrieval fails due to database errors",
        "operationId": "get_plans_api_v1_plans__get",
        "parameters": [
          {
            "description": "Maximum number of plans to return (1-100)",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 20,
              "description": "Maximum number of plans to return (1-100)",
              "exclusiveMinimum": 0,
              "maximum": 100,
              "title": "Limit",
              "type": "integer"
            }
          },
          {
            "description": "Number of plans to skip for pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "description": "Number of plans to skip for pagination",
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse_PlanResponseModel_"
                }
              }
            },
            "description": "List of plans retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Not authenticated"
                }
              }
            },
            "description": "Authentication required"
          },
          "422": {
            "content": {
              "application/json": {
                "example": {
                  "detail": [
                    {
                      "loc": [
                        "query",
                        "limit"
                      ],
                      "msg": "ensure this value is greater than 0",
                      "type": "value_error.number.not_gt"
                    }
                  ]
                }
              }
            },
            "description": "Validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Failed to retrieve plans"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "SupabaseJWTBearer": []
          }
        ],
        "summary": "Get user's workout plans",
        "tags": [
          "plans"
        ]
      },
      "post": {
        "description": "Create a new workout plan.\n\nCreates a new workout plan for the authenticated user with the provided details.\nThe plan will be assigned a unique ID and version number 1.\n\nArgs:\n    plan_data: The plan creation data\n    jwt_payload: The authenticated user's JWT payload\n    supabase: The Supabase client instance\n\nReturns:\n    The created plan with all database-generated fields\n\nRaises:\n    HTTPException: If plan creation fails due to validation or database errors",
        "operationId": "create_plan_api_v1_plans__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanCreateModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanResponseModel"
                }
              }
            },
            "description": "Plan created successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Plan name cannot be empty or only whitespace"
                }
              }
            },
            "description": "Invalid input data"
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Not authenticated"
                }
              }
            },
            "description": "Authentication required"
          },
          "422": {
            "content": {
              "application/json": {
                "example": {
                  "detail": [
                    {
                      "loc": [
                        "body",
                        "training_style"
                      ],
                      "msg": "Invalid training style",
                      "type": "value_error"
                    }
                  ]
                }
              }
            },
            "description": "Validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Failed to create plan"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "SupabaseJWTBearer": []
          }
        ],
        "summary": "Create a new workout plan",
        "tags": [
          "plans"
        ]
      }
    },
    "/api/v1/plans/{plan_id}": {
      "delete": {
        "description": "Soft delete a workout plan.\n\nPerforms a soft delete by setting the deleted_at timestamp. Only the plan owner\ncan delete their plans. Plans with active workout sessions cannot be deleted.\nThe plan and all its versions will be marked as deleted.\n\nArgs:\n    plan_id: The UUID of the plan to delete\n    jwt_payload: The authenticated user's JWT payload\n    supabase: The Supabase client instance\n\nReturns:\n    None (204 No Content on success)\n\nRaises:\n    HTTPException:\n        - 400 if plan has active workout sessions\n        - 403 if user doesn't own the plan\n        - 404 if plan doesn't exist or is already deleted\n        - 500 if deletion fails due to database errors",
        "operationId": "delete_plan_api_v1_plans__plan_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "plan_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "title": "Plan Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Plan deleted successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Cannot delete plan - it has active workout sessions"
                }
              }
            },
            "description": "Cannot delete plan with active workout sessions"
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Not authenticated"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to delete this plan"
                }
              }
            },
            "description": "User does not own this plan"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Plan not found"
                }
              }
            },
            "description": "Plan not found or already deleted"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          },
          "500": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Failed to delete plan"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "SupabaseJWTBearer": []
          }
        ],
        "summary": "Soft delete a workout plan",
        "tags": [
          "plans"
        ]
      },
      "get": {
        "description": "Retrieve a specific workout plan by its ID.\n\nReturns the detailed plan data for the specified plan_id. Access is controlled\nby RLS policies - users can only access their own plans unless the plan is public.\nPublic plans (is_public=true) can be viewed by anyone, including unauthenticated users.\n\nArgs:\n    plan_id: The UUID of the plan to retrieve\n    jwt_payload: Optional JWT payload - required for private plans, optional for public\n    supabase: The Supabase client instance\n\nReturns:\n    PlanResponseModel containing the plan details\n\nRaises:\n    HTTPException:\n        - 404 if plan doesn't exist or user lacks permission\n        - 500 if retrieval fails due to database errors",
        "operationId": "get_plan_by_id_api_v1_plans__plan_id__get",
        "parameters": [
          {
            "in": "path",
            "name": "plan_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "title": "Plan Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanResponseModel"
                }
              }
            },
            "description": "Plan retrieved successfully"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Plan not found"
                }
              }
            },
            "description": "Plan not found or access denied"
          },
          "422": {
            "content": {
              "application/json": {
                "example": {
                  "detail": [
                    {
                      "loc": [
                        "path",
                        "plan_id"
                      ],
                      "msg": "value is not a valid uuid",
                      "type": "type_error.uuid"
                    }
                  ]
                }
              }
            },
            "description": "Invalid plan ID format"
          },
          "500": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Failed to retrieve plan"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "SupabaseJWTBearer": []
          }
        ],
        "summary": "Get a specific workout plan by ID",
        "tags": [
          "plans"
        ]
      },
      "put": {
        "description": "Update a workout plan by creating a new version.\n\nCreates a new version of the specified plan with the provided updates.\nThe original plan remains unchanged (immutable versioning). Only the plan owner\ncan update their plans, and only active versions can be updated.\n\nVersion Management:\n- Increments version_number from the current version\n- Sets parent_plan_id to maintain version history\n- Marks the current version as inactive (is_active=false)\n- Marks the new version as active (is_active=true)\n\nArgs:\n    plan_id: The UUID of the plan to update\n    plan_update: The partial update data\n    jwt_payload: The authenticated user's JWT payload\n    supabase: The Supabase client instance\n\nReturns:\n    The newly created plan version with updated fields\n\nRaises:\n    HTTPException:\n        - 400 if trying to update an inactive version or no changes provided\n        - 403 if user doesn't own the plan\n        - 404 if plan doesn't exist\n        - 409 if version conflict occurs\n        - 500 if update fails due to database errors",
        "operationId": "update_plan_api_v1_plans__plan_id__put",
        "parameters": [
          {
            "in": "path",
            "name": "plan_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "title": "Plan Id",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanUpdateModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanResponseModel"
                }
              }
            },
            "description": "Plan updated successfully (new version created)"
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "inactive_version": {
                    "summary": "Cannot update inactive version",
                    "value": {
                      "detail": "Cannot update an inactive plan version"
                    }
                  },
                  "no_changes": {
                    "summary": "No changes provided",
                    "value": {
                      "detail": "No changes provided in update request"
                    }
                  }
                }
              }
            },
            "description": "Invalid update request"
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Not authenticated"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to update this plan"
                }
              }
            },
            "description": "User does not own this plan"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Plan not found"
                }
              }
            },
            "description": "Plan not found"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "A newer version of this plan already exists"
                }
              }
            },
            "description": "Version conflict"
          },
          "422": {
            "content": {
              "application/json": {
                "example": {
                  "detail": [
                    {
                      "loc": [
                        "body",
                        "duration_weeks"
                      ],
                      "msg": "ensure this value is greater than 0",
                      "type": "value_error.number.not_gt"
                    }
                  ]
                }
              }
            },
            "description": "Validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Failed to update plan"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "SupabaseJWTBearer": []
          }
        ],
        "summary": "Update a workout plan (creates new version)",
        "tags": [
          "plans"
        ]
      }
    },
    "/api/v1/workouts/": {
      "get": {
        "description": "Retrieve a paginated list of the authenticated user's workout sessions.\n\nReturns a paginated list of workout sessions filtered by the authenticated user's ID.\nWorkouts are sorted by started_at DESC to show most recent workouts first.\nEach workout includes summary statistics like total sets and volume, with\ndistinction between working sets and total sets for volume calculations.\n\nFiltering options:\n- Date range: Filter by workout date using date_from and date_to\n- Plan: Filter by specific workout plan using plan_id\n- Workout type: Filter by training stimulus (strength/hypertrophy/power/conditioning)\n- Training phase: Filter by periodization phase (accumulation/intensification/realization/deload)\n\nArgs:\n    page: Page number (1-indexed)\n    per_page: Number of items per page (1-100)\n    start_date: Optional start date filter (inclusive)\n    end_date: Optional end date filter (inclusive)\n    plan_id: Optional plan ID filter\n    workout_type: Optional workout type filter\n    training_phase: Optional training phase filter\n    jwt_payload: The authenticated user's JWT payload\n    repo: The workouts repository instance\n\nReturns:\n    EnhancedPaginatedWorkoutResponse containing the workouts array and pagination metadata\n\nRaises:\n    HTTPException: If workout retrieval fails due to database errors",
        "operationId": "get_workouts_api_v1_workouts__get",
        "parameters": [
          {
            "description": "Page number (1-indexed)",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "description": "Page number (1-indexed)",
              "minimum": 1,
              "title": "Page",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page (1-100)",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "description": "Number of items per page (1-100)",
              "exclusiveMinimum": 0,
              "maximum": 100,
              "title": "Per Page",
              "type": "integer"
            }
          },
          {
            "description": "Filter workouts from this date (inclusive)",
            "in": "query",
            "name": "date_from",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter workouts from this date (inclusive)",
              "title": "Date From"
            }
          },
          {
            "description": "Filter workouts until this date (inclusive)",
            "in": "query",
            "name": "date_to",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "format": "date",
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter workouts until this date (inclusive)",
              "title": "Date To"
            }
          },
          {
            "description": "Filter workouts by plan ID",
            "in": "query",
            "name": "plan_id",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "format": "uuid",
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter workouts by plan ID",
              "title": "Plan Id"
            }
          },
          {
            "description": "Filter by workout type (strength/hypertrophy/power/conditioning)",
            "in": "query",
            "name": "workout_type",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/WorkoutType"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by workout type (strength/hypertrophy/power/conditioning)",
              "title": "Workout Type"
            }
          },
          {
            "description": "Filter by training phase (accumulation/intensification/realization/deload)",
            "in": "query",
            "name": "training_phase",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TrainingPhase"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by training phase (accumulation/intensification/realization/deload)",
              "title": "Training Phase"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnhancedPaginatedWorkoutResponse"
                }
              }
            },
            "description": "List of workout sessions retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Not authenticated"
                }
              }
            },
            "description": "Authentication required"
          },
          "422": {
            "content": {
              "application/json": {
                "example": {
                  "detail": [
                    {
                      "loc": [
                        "query",
                        "per_page"
                      ],
                      "msg": "ensure this value is greater than 0",
                      "type": "value_error.number.not_gt"
                    }
                  ]
                }
              }
            },
            "description": "Validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Failed to retrieve workouts"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "SupabaseJWTBearer": []
          }
        ],
        "summary": "Get user's workout sessions",
        "tags": [
          "workouts"
        ]
      },
      "post": {
        "description": "Create a new workout session with associated sets.\n\nCreates a new workout session for the authenticated user with comprehensive\npowerbuilding performance tracking. Each workout must contain at least one set.\n\nSupports detailed tracking of:\n- Performance metrics: weight, reps, RIR, RPE, tempo, form quality\n- Wellness indicators: mood, energy levels, stress, sleep quality\n- Training context: workout type, training phase, overall session RPE\n- Advanced metrics: intensity percentage, 1RM estimates, failure tracking\n- Equipment variations and assistance types\n\nThe workout will automatically:\n- Calculate volume_load for each set (weight * reps)\n- Distinguish between working sets and warm-up sets for effective volume\n- Set order_in_workout for sets based on submission order\n- Track timestamps for session start and completion\n- Update user's affinity score upon successful logging\n\nArgs:\n    workout_data: The workout creation data including sets\n    jwt_payload: The authenticated user's JWT payload\n    repo: The workouts repository instance\n\nReturns:\n    The created workout session with all database-generated fields\n\nRaises:\n    HTTPException: If workout creation fails due to validation or database errors",
        "operationId": "create_workout_api_v1_workouts__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkoutCreateModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkoutResponseModel"
                }
              }
            },
            "description": "Workout session created successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "empty_sets": {
                    "summary": "No sets provided",
                    "value": {
                      "detail": "Workout must contain at least one set"
                    }
                  },
                  "invalid_rpe": {
                    "summary": "Invalid RPE value",
                    "value": {
                      "detail": "RPE must be between 1 and 10"
                    }
                  },
                  "invalid_tempo": {
                    "summary": "Invalid tempo format",
                    "value": {
                      "detail": "Tempo must be in format X-X-X-X (e.g., 2-0-2-0)"
                    }
                  }
                }
              }
            },
            "description": "Invalid input data"
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Not authenticated"
                }
              }
            },
            "description": "Authentication required"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Plan not found or access denied"
                }
              }
            },
            "description": "Referenced plan not found"
          },
          "422": {
            "content": {
              "application/json": {
                "example": {
                  "detail": [
                    {
                      "loc": [
                        "body",
                        "sets",
                        0,
                        "weight"
                      ],
                      "msg": "ensure this value is greater than or equal to 0",
                      "type": "value_error.number.not_ge"
                    }
                  ]
                }
              }
            },
            "description": "Validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Failed to create workout session"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "SupabaseJWTBearer": []
          }
        ],
        "summary": "Log a new workout session",
        "tags": [
          "workouts"
        ]
      }
    },
    "/api/v1/workouts/{workout_id}": {
      "delete": {
        "description": "Delete a workout session and all associated sets.\n\nPerforms a hard delete of the workout session and all its associated sets.\nOnly the workout owner can delete their workouts. This operation is\npermanent and cannot be undone.\n\nArgs:\n    workout_id: The UUID of the workout to delete\n    jwt_payload: The authenticated user's JWT payload\n    repo: The workouts repository instance\n\nReturns:\n    None (204 No Content on success)\n\nRaises:\n    HTTPException:\n        - 403 if user doesn't own the workout\n        - 404 if workout doesn't exist\n        - 500 if deletion fails due to database errors",
        "operationId": "delete_workout_api_v1_workouts__workout_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "workout_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "title": "Workout Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Workout deleted successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Not authenticated"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to delete this workout"
                }
              }
            },
            "description": "User does not own this workout"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Workout not found"
                }
              }
            },
            "description": "Workout not found"
          },
          "422": {
            "content": {
              "application/json": {
                "example": {
                  "detail": [
                    {
                      "loc": [
                        "path",
                        "workout_id"
                      ],
                      "msg": "value is not a valid uuid",
                      "type": "type_error.uuid"
                    }
                  ]
                }
              }
            },
            "description": "Invalid workout ID format"
          },
          "500": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Failed to delete workout"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "SupabaseJWTBearer": []
          }
        ],
        "summary": "Delete a workout session",
        "tags": [
          "workouts"
        ]
      },
      "get": {
        "description": "Retrieve a specific workout session with all its sets.\n\nReturns the detailed workout data for the specified workout_id, including\nall sets performed, exercise information, and wellness metrics. Access is\nrestricted to the workout owner via RLS policies.\n\nThe response includes:\n- Full workout session details\n- All sets with exercise names and performance metrics\n- Calculated statistics (total volume, duration)\n- Wellness tracking data\n\nArgs:\n    workout_id: The UUID of the workout to retrieve\n    jwt_payload: The authenticated user's JWT payload\n    repo: The workouts repository instance\n\nReturns:\n    WorkoutDetailResponseModel containing the workout details with all sets\n\nRaises:\n    HTTPException:\n        - 404 if workout doesn't exist or user lacks permission\n        - 500 if retrieval fails due to database errors",
        "operationId": "get_workout_by_id_api_v1_workouts__workout_id__get",
        "parameters": [
          {
            "in": "path",
            "name": "workout_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "title": "Workout Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkoutDetailResponseModel"
                }
              }
            },
            "description": "Workout session retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Not authenticated"
                }
              }
            },
            "description": "Authentication required"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Workout not found"
                }
              }
            },
            "description": "Workout not found or access denied"
          },
          "422": {
            "content": {
              "application/json": {
                "example": {
                  "detail": [
                    {
                      "loc": [
                        "path",
                        "workout_id"
                      ],
                      "msg": "value is not a valid uuid",
                      "type": "type_error.uuid"
                    }
                  ]
                }
              }
            },
            "description": "Invalid workout ID format"
          },
          "500": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "Failed to retrieve workout"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "SupabaseJWTBearer": []
          }
        ],
        "summary": "Get a specific workout session by ID",
        "tags": [
          "workouts"
        ]
      }
    },
    "/health": {
      "get": {
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "Response Health Check Health Get",
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [],
        "summary": "Health Check"
      }
    }
  },
  "security": [
    {
      "SupabaseJWTBearer": []
    }
  ],
  "servers": [
    {
      "description": "Default API server",
      "url": "http://localhost:8000"
    }
  ]
}