[project]
name = "back-burn"
version = "0.1.0"
description = "Backend for Slow Burn, an AI Fitness Companion application"
readme = "README.md"
authors = [{ name = "Steven Simonitch", email = "ssimonitch@gmail.com" }]
requires-python = ">=3.12"

# Core Dependencies
dependencies = [
    "fastapi[standard]>=0.116.1",
    "python-jose[cryptography]>=3.5.0",
    "cachetools>=6.1.0",
    "pydantic-settings>=2.10.1",
    "supabase>=2.17.0",
    "httpx>=0.28.1",
    "python-dotenv>=1.1.1",
]

# Optional dependencies
[dependency-groups]
dev = [
    "ruff>=0.9.0",
    "pre-commit>=3.5.0",
    "black>=25.1.0",
    "mypy>=1.17.0",
    "pytest>=8.4.1",
    "poethepoet>=0.36.0",
    "pytest-cov>=6.2.1",
    "pytest-asyncio>=1.1.0",
    "pytest-mock>=3.14.1",
    "openapi-spec-validator>=0.7.2",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

# Import sorting configuration (isort compatibility)
[tool.ruff.lint.isort]
known-first-party = []
force-single-line = false
split-on-trailing-comma = true
combine-as-imports = true

# MyPy configuration
[tool.mypy]
python_version = "3.12"
files = ["src/", "tests/"]
check_untyped_defs = true
warn_return_any = false
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "fastapi.*",
    "uvicorn.*",
    "jose.*",
    "httpx.*",
    "cachetools.*",
    "supabase.*",
    "openapi_spec_validator.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
pythonpath = ["src", "."]
addopts = [
    "--cov=src",
    "--cov=main",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
]
testpaths = ["tests"]

# Poethepoet task runner configuration
[tool.poe.tasks]
# Formatting
format = "black src/ tests/"
format-check = "black --check src/ tests/"

# Linting
lint = "ruff check src/ tests/"
lint-fix = "ruff check --fix src/ tests/"

# Type checking
typecheck = "mypy"

# Testing
test = "pytest"
test-cov = "pytest --cov=src --cov=main --cov-report=term-missing"
test-verbose = "pytest -v"

# Combined tasks
check = ["lint", "typecheck", "format-check"]
fix = ["format", "lint-fix"]
ci = ["lint", "typecheck", "format-check", "test-cov", "verify-openapi"]

# FastAPI development
dev = "fastapi dev main.py"
run = "fastapi run main.py"

# OpenAPI generation
generate-openapi = "python scripts/generate_openapi.py"
verify-openapi = "python scripts/verify_openapi.py"
publish-openapi = "python scripts/publish_openapi.py --generate"
